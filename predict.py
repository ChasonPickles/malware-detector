from model import *
from data import *
import torch
import sys

rnn = torch.load('char-rnn-classification.pt')

# Just return an output given a line
def evaluate(line_tensor):
    hidden = rnn.initHidden()

    for i in range(line_tensor.size()[0]):
        output, hidden = rnn(line_tensor[i], hidden)

    return output

def predict(line, n_predictions=1):
    output = evaluate(Variable(lineToTensor(line)))

    # Get top N categories
    topv, topi = output.data.topk(n_predictions, 1, True)
    predictions = []

    for i in range(n_predictions):
        value = topv[0][i]
        category_index = topi[0][i]
        print('(%.2f) %s' % (value, all_categories[category_index]))
        predictions.append([value, all_categories[category_index]])

    return predictions

def simplePredict(line):
    output = evaluate(Variable(lineToTensor(line)))

    # Get top N categories
    topv, topi = output.data.topk(1, 1, True)

    value = topv[0][0]
    category_index = topi[0][0]
    #print('(%.2f) %s' % (value, all_categories[category_index]))
    return all_categories[category_index]



count = 0
for x in good_lines_test:
    if(simplePredict(x) == 'good'):
        count += 1

print(count)
print("-----")
print(len(good_lines_test))

count = 0
for x in bad_lines_test:
    if(simplePredict(x) == 'bad'):
        count += 1


print(count)
print("-----")
print(len(bad_lines_test))

if __name__ == '__main__':
    predict(sys.argv[1])
