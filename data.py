import torch
import glob
import unicodedata
import string

all_letters = string.ascii_lowercase + "/-.;'_"
n_letters = len(all_letters)


def findFiles(path):
    return glob.glob(path)


# Turn a Unicode string to plain ASCII, thanks to http://stackoverflow.com/a/518232/2809427
def unicodeToAscii(s):
    return ''.join(
        c for c in unicodedata.normalize('NFD', s)
        if unicodedata.category(c) != 'Mn' and c in all_letters
    )


# Read a file and split into lines
def readLines(filename):
    lines = open(filename).read().strip().split('\n')
    return [unicodeToAscii(line) for line in lines]


bad_lines = []
good_lines = []
with open("/Users/harshbindra/harshStuff/htn/data.csv") as f:
    for line in f:
        line_list = line.split(',')
        url, label = line_list[0], line_list[1].rstrip()
        index_slash = url.find('/')
        domain_name = ""
        if index_slash != -1:
            domain_name = url[:index_slash]
        else:
            domain_name = url

        if(label == "bad"):
            bad_lines.append(domain_name)
        else:
            good_lines.append(domain_name)


good_lines_ascii = [unicodeToAscii(line) for line in good_lines]
bad_lines_ascii = [unicodeToAscii(line) for line in bad_lines]
bad_lines = None
good_lines = None

good_lines_test = good_lines_ascii[:200]
bad_lines_test = bad_lines_ascii[:400]
good_lines_test = [x for x in good_lines_test if x != "http" and x != ".com"]

good_lines_ascii = good_lines_ascii[200:]
bad_lines_ascii = bad_lines_ascii[400:300000]

# Build the category_lines dictionary, a list of lines per category
category_lines = {}
all_categories = ['good', 'bad']
lines = readLines('/Users/harshbindra/harshStuff/htn/bad_esentire.txt')
category_lines['bad'] = lines
category_lines['bad'].extend(bad_lines_ascii)
category_lines['good'] = good_lines_ascii

n_categories = len(all_categories)


# Find letter index from all_letters, e.g. "a" = 0
def letterToIndex(letter):
    return all_letters.find(letter)


# Turn a line into a <line_length x 1 x n_letters>,
# or an array of one-hot letter vectors
def lineToTensor(line):
    tensor = torch.zeros(len(line), 1, n_letters)
    for li, letter in enumerate(line):
        tensor[li][0][letterToIndex(letter)] = 1
    return tensor
