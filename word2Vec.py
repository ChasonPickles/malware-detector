from gensim.test.utils import get_tmpfile
#from gensim.test.utils import common_texts
from gensim.models import Word2Vec, KeyedVectors

# machine learning
from sklearn.ensemble import RandomForestClassifier
#from sklearn.linear_model import LogisticRegression
#from sklearn.svm import SVC, LinearSVC
from sklearn.neighbors import KNeighborsClassifier
#from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
#from sklearn.linear_model import SGDClassifier
#from sklearn.tree import DecisionTreeClassifier
import numpy as np
import random

sentences = ["character"]
oneWord = ["character"]


path = get_tmpfile("word2vec.model")

sites = [["http", "bloomberg.com", "akjdh", "/akjsdh"], ["http", "google.com", "/aksjdh", ""]]

model = Word2Vec(sites, size=50, window=5, min_count=1, workers=4)
model.wv.save_word2vec_format('word2vec.txt', binary=False)
model.wv.save_word2vec_format('word2vec.bin')

#word_vectors = KeyedVectors.load('word2vec.bin')


print(type(model.wv.vectors))
print(model.wv.vectors)


###############################################################################
# PROCESS DATA  ###############################################################
###############################################################################

X_train_malicious = np.array(model.wv.vectors)
Y_train_malicious = np.ones(len(X_train_malicious))

X_train_safe = []
Y_train_safe = np.zeros(len(X_train_safe))


X_tuples = []
for x in X_train_malicious:
    X_tuples.append((x, 1))
for x in X_train_safe:
    X_tuples.append((x, 0))

random.shuffle(X_tuples)

X_train = np.array([t[0] for t in X_tuples])
Y_train = np.array([t[1] for t in X_tuples])

###############################################################################
# Training ####################################################################
###############################################################################

#X_test = []
#
#random_forest = RandomForestClassifier(n_estimators=100)
#random_forest.fit(X_train, Y_train)
#Y_pred = random_forest.predict(X_test)
#random_forest.score(X_train, Y_train)
#acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)
#acc_random_forest
#
#
#knn = KNeighborsClassifier(n_neighbors=3)
#knn.fit(X_train, Y_train)
#Y_pred = knn.predict(X_test)
#acc_knn = round(knn.score(X_train, Y_train) * 100, 2)
#acc_knn
#
#perceptron = Perceptron()
#perceptron.fit(X_train, Y_train)
#Y_pred = perceptron.predict(X_test)
#acc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)
#acc_perceptron

#rfc = RandomForestClassifier(n_jobs=-1, max_features= 'sqrt', n_estimators=40, oob_score=True, random_state=42)
